#!/bin/bash
# ---------------------------------------------------------------------------------------------
# MIT License
#
# Copyright (c) 2020, Solace Corporation, Ricardo Gomez-Ulmke (ricardo.gomez-ulmke@solace.com)
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# ---------------------------------------------------------------------------------------------

-
  name: "Test module: solace_get_queues"
  hosts: "{{ brokers }}"
  gather_facts: no
  module_defaults:
    solace_queue:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
    solace_get_queues:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"

  tasks:

    - name: Get pre-existing queues
      solace_get_queues:
        msg_vpn: "{{ vpn }}"
        query_params:
          where:
            - "queueName==ansible-solace/test*"
            - "ingressEnabled==true"
            - "maxMsgSpoolUsage<2000"
            - "eventMsgSpoolUsageThreshold.clearPercent<=60"
          select:
            - "queueName"
            - "eventMsgSpoolUsageThreshold"
      register: pre_existing_queues_result

    - name: Print pre-existing queue list
      debug:
        msg: "{{ pre_existing_queues_result.result_list }}"

    - name: Print count of pre-existing queue list
      debug:
        msg: "{{ pre_existing_queues_result.result_list_count }}"

    - name: Remove all found queues
      solace_queue:
        name: "{{ item.queueName }}"
        state: absent
      register: result
      loop: "{{ pre_existing_queues_result.result_list }}"

    - include_vars:
        file: "./lib/queues.vars.json"
        name: target_result_list

    - name: Adding / updating queues
      include_tasks: ./lib/queue.tasks.yml
      register: result
      loop: "{{ target_result_list.queues }}"

    - name: Get new queues
      solace_get_queues:
        msg_vpn: "{{ vpn }}"
        query_params:
          where:
            - "queueName==ansible-solace/test*"
            - "ingressEnabled==true"
            - "maxMsgSpoolUsage<101"
            - "eventMsgSpoolUsageThreshold.clearPercent<=60"
          select:
            - "queueName"
            - "eventMsgSpoolUsageThreshold"
      register: new_queues_result

    - name: Print new queue list
      debug:
        msg: "{{ new_queues_result.result_list }}"

    - name: Print count of pre-existing queue list
      debug:
        msg: "{{ new_queues_result.result_list_count }}"

    - name: Fail when new queue list count != 4
      fail:
        msg: "new queue count != 4"
      when: new_queues_result.result_list_count != 4

    - name: Remove all queues again
      solace_queue:
        name: "{{ item.name }}"
        state: absent
      register: result
      loop: "{{ target_result_list.queues }}"


###
# The End.
